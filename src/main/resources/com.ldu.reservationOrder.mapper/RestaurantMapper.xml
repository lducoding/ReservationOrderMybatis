<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ldu.reservationOrder.mapper.RestaurantMapper">
<!--    id는 매퍼에서 찾는 고유한 유니크 id type은 리턴 타입-->
    <resultMap id="RestaurantDetailDtoResultMap" type="RestaurantDetailDto">
<!--        column은 테이블의 컬럼명 property는 dto의 속성명-->
        <id column="restaurant_id" property="restaurantId"/>
        <result column="location" property="location"/>
        <result column="restaurant_name" property="restaurantName"/>
        <result column="category" property="category"/>
        <result column="standard_time" property="standardTime"/>
        <association property="goalDto" javaType="GoalDto" resultMap="goalDtoResultMap">
        </association>
        <collection property="menuList" ofType="Menu">
            <id column="menu_id" property="menuId"/>
            <result column="menu_name" property="menuName"/>
            <result column="menu_price" property="menuPrice"/>
            <result column="menu_img" property="menuImg"/>
        </collection>
    </resultMap>
    <resultMap id="goalDtoResultMap" type="GoalDto">
        <id column="goal_id" property="goalId"/>
        <result column="goal_type" property="goalType"/>
        <result column="goal_money" property="goalMoney"/>
        <result column="recent_money" property="recentMoney"/>
        <result column="success" property="success"/>
        <result column="register_date" property="registerDate"/>
    </resultMap>

    <!-- xml에서 특수문자 추가로 필요하면 검색/ CDATA 사용하는 방법도 있다. -->
    <!--    < : &lt;-->
    <!--    > : &gt;-->
    <!--    & : &amp;-->
    <!--  useGeneratedKeys 는 자동으로 키 생성 keyProperty는 자동생성 키 컬럼명 -->
    <insert id="registerRestaurant" useGeneratedKeys="true" keyProperty="restaurantId">
        insert into RESTAURANT
        (res_user_id, goal_id, location, restaurant_name, category, standard_time)
        values (#{resUserId}, #{goalId}, #{location}, #{restaurantName}, #{category}, #{standardTime})
    </insert>

    <update id="updateRestaurant">
        update RESTAURANT
        set (location = {updateParam.location},
                restaurant_name = {updateParam.restaurant_name},
                category = {updateParam.category},
                standaed_time = {updatedParam.standaedTime}
                )
        where id = #{id}
    </update>

    <select id="findById">

    </select>

    <select id="findAll" resultType="RestaurantDto">
        select restaurant_id, res_user_id, goal_id, location, restaurant_name, category, standard_time
        from RESTAURANT
        where id = #{id}
    </select>

    <select id="getSearchRestaurantLists" resultType="RestaurantDto">
        select restaurant_id, res_user_id, goal_id, location, restaurant_name, category, standard_time
        from RESTAURANT
        <where>
            <if test="location != null and location != ''">
                and location like concat('%', #{location}, '%')
            </if>
            <if test="restaurantName != null and restaurantName != ''">
                and restaurant_name like concat('%', #{restaurantName}, '%')
            </if>
            <if test="category != null and category != ''">
                and category like concat('%', #{category}, '%')
            </if>
        </where>
    </select>

    <select id="getRestaurantDetail" resultMap="RestaurantDetailDtoResultMap">
        select
            res.restaurant_id, res.location, res.restaurant_name, res.category, res.standard_time,
            menu_id, menu_name, menu_price, menu_img,
            goal.goal_id, goal.goal_type, goal.goal_money, goal.recent_money, goal.success, goal.register_date
        from RESTAURANT as res,
             MENU AS menu,
             GOAL as goal
        where res.restaurant_id = #{id}
          and res.restaurant_id  = menu.restaurant_id = goal.restaurant_id
    </select>

</mapper>